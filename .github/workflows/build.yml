name: Publish and Deploy Pipeline

on:
  push:
    branches:
      - dev
      - uat
      - main
      - feature/*

permissions:
  contents: write
  
jobs:
  # Common Publish to Exchange job
  Publish_to_Exchange:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Increment Version
        run: |
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. -v OFS=. '{$NF += 1 ; print}')
          echo "New version: $NEW_VERSION"
          mvn versions:set -DnewVersion=$NEW_VERSION -DgenerateBackupPoms=false

      - name: Commit and Push Changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})  # Get current branch
          echo "Pushing changes to branch: $BRANCH_NAME"

          git checkout $BRANCH_NAME  # Ensure correct branch
          git pull origin $BRANCH_NAME  # Sync with remote
          git commit -am "chore: Increment POM version to $NEW_VERSION"
          git push origin $BRANCH_NAME  # Push dynamically
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check Default Maven Version
        run: mvn -version

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: 17

      - name: Check for Latest Stable Dependency Updates
        shell: bash
        run: |
          echo "Checking for outdated dependencies (stable versions only)..."
          mvn versions:display-dependency-updates > dependency-updates.txt 2>&1
          echo "===== Dependency Updates Output ====="
          cat dependency-updates.txt || echo "File is empty!"
          echo "===================================="
          
          if [ ! -s "dependency-updates.txt" ]; then
            echo "ERROR: dependency-updates.txt is empty! Maven might have failed."
            exit 1
          fi
          
          stable_found="false"
          echo "===== Checking for Stable Versions ====="
          while IFS= read -r line; do
            if [[ "$line" == *"->"* ]]; then
              clean_line=$(echo "$line" | sed -E 's/^\[INFO\][[:space:]]*//')
              dependency=$(echo "$clean_line" | awk -F'[: ]' '{print $1":"$2}' | xargs)
              new_version=$(echo "$clean_line" | awk -F '->' '{print $2}' | xargs)
              if [[ ! "$new_version" =~ [Ss][Nn][Aa][Pp][Ss][Hh][Oo][Tt] ]] && \
                [[ ! "$new_version" =~ [Rr][Cc] ]] && \
                [[ ! "$new_version" =~ [Aa][Ll][Pp][Hh][Aa] ]] && \
                [[ ! "$new_version" =~ [Bb][Ee][Tt][Aa] ]]; then
                echo "Stable version found: Dependency '$dependency' can be updated to version $new_version"
                stable_found="true"
              fi
            fi
          done < "dependency-updates.txt"
          
          if [[ "$stable_found" == "true" ]]; then
            if [[ "${{ vars.ENABLE_FLAG }}" == "true" ]]; then
              echo "ERROR: Stable newer dependency versions are available. Failing the build."
              exit 1
            else
              echo "WARNING: Stable newer versions are available, Proceeding with build."
            fi
          else
            echo "Only non-stable versions found. Proceeding with build."
          fi    

      - name: Publish to Exchange
        shell: bash
        run: |
          echo "Publishing to Exchange"
          mvn clean deploy --settings .maven/settings.xml -DskipMunitTests  \
            -Dclient.id="${{ secrets.CONNECTED_APP_CLIENT_ID }}" \
            -Dclient.secret="${{ secrets.CONNECTED_APP_CLIENT_SECRET }}" \
            -DgroupId="${{ secrets.GROUPID }}" \

  Deploying_to_Development:
    needs: Publish_to_Exchange
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build and Deploy to DEV
        shell: bash
        run: |
          mvn deploy --settings .maven/settings.xml -DskipTests -DmuleDeploy \
            -Dclient.id="${{ secrets.DEV_CLIENT_ID }}" \
            -Dclient.secret="${{ secrets.DEV_CLIENT_SECRET }}" \
            -Danypoint.platform.client_id="${{ secrets.DEV_PLATFORM_CLIENT_ID }}" \
            -Danypoint.platform.client_secret="${{ secrets.DEV_PLATFORM_CLIENT_SECRET }}"

  Deploying_to_UAT:
    needs: Publish_to_Exchange
    if: github.ref == 'refs/heads/uat'
    runs-on: ubuntu-latest
    environment: uat
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build and Deploy to UAT
        shell: bash
        run: |
          mvn deploy --settings .maven/settings.xml -DskipTests -DmuleDeploy \
            -Dclient.id="${{ secrets.UAT_CLIENT_ID }}" \
            -Dclient.secret="${{ secrets.UAT_CLIENT_SECRET }}" \
            -Danypoint.platform.client_id="${{ secrets.UAT_PLATFORM_CLIENT_ID }}" \
            -Danypoint.platform.client_secret="${{ secrets.UAT_PLATFORM_CLIENT_SECRET }}"

  Deploying_to_Production:
    needs: Publish_to_Exchange
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build and Deploy to PROD
        shell: bash
        run: |
          mvn deploy --settings .maven/settings.xml -DskipTests -DmuleDeploy \
            -Dclient.id="${{ secrets.PROD_CLIENT_ID }}" \
            -Dclient.secret="${{ secrets.PROD_CLIENT_SECRET }}" \
            -Danypoint.platform.client_id="${{ secrets.PROD_PLATFORM_CLIENT_ID }}" \
            -Danypoint.platform.client_secret="${{ secrets.PROD_PLATFORM_CLIENT_SECRET }}"
            -DcloudhubEnvironment="${{ secrets.CLOUDHUBENVIRONMENT }}" \
            -Dtarget="${{ secrets.TARGET }}" \
            -Denv="${{ secrets.ENV }}"
